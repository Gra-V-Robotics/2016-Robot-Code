package org.usfirst.frc5816.myRobot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

public class RobotMap {

    public static SpeedController driveTrainFrontLeft;
    public static SpeedController driveTrainBackLeft;
    public static SpeedController driveTrainFrontRight;
    public static SpeedController driveTrainBackRight;
    public static SpeedController intake;
    public static RobotDrive driveTrainRobotDrive;
    public static Compressor airCompressorCompressor;
    public static Solenoid airCompressorSolenoid;
    
    public static void init() {

        driveTrainFrontLeft = new VictorSP(0);
        LiveWindow.addActuator("DriveTrain", "FrontLeft", (VictorSP) driveTrainFrontLeft);
        
        driveTrainBackLeft = new VictorSP(1);
        LiveWindow.addActuator("DriveTrain", "BackLeft", (VictorSP) driveTrainBackLeft);
        
        driveTrainFrontRight = new VictorSP(2);
        LiveWindow.addActuator("DriveTrain", "FrontRight", (VictorSP) driveTrainFrontRight);
        
        driveTrainBackRight = new VictorSP(3);
        LiveWindow.addActuator("DriveTrain", "BackRight", (VictorSP) driveTrainBackRight);

        intake = new VictorSP(15);
        LiveWindow.addActuator("Intake", "Intake", (VictorSP) intake);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainFrontLeft, driveTrainBackLeft,
              driveTrainFrontRight, driveTrainBackRight);
        
        driveTrainRobotDrive.setSafetyEnabled(false);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, false);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, false);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, false);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, false);
        airCompressorCompressor = new Compressor(0);

        intake = new VictorSP(15);
        LiveWindow.addActuator("Intake", "Intake", (VictorSP) intake);

        airCompressorSolenoid = new Solenoid(0);
        LiveWindow.addActuator("AirCompressor", "Solenoid", airCompressorSolenoid);

    }

}
